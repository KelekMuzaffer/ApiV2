security:
    # Encoder à renseigner ici en auto mais peut-etre aussi en bcrypt ou argon2
    encoders:
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # Provider à renseigner avec la class et la clé primaire
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        # Login et User et Article rajouter pour avoir accès au method avec le token
        login:
            pattern:  ^/api/login
            stateless: true
            anonymous: true
            json_login:
                check_path:               /api/login_check
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
        # Firewall spécifique aux users avec les methods utilisable en cas d'authentification
        users:
            pattern:   ^/api/users
            methods: [PUT, PATCH, DELETE]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
        # Firewall spécifique aux articles avec les methods utilisable en cas d'authentification
        articles:
            pattern:   ^/api/articles
            methods: [POST, PUT, PATCH, DELETE]
            stateless: true
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # Config des paths avec les roles et ici les methods car ils sont renseigner plus haut
         - { path: ^/api/users, roles: IS_AUTHENTICATED_FULLY, methods: [PUT, PATCH, DELETE]}
         - { path: ^/api/articles, roles: IS_AUTHENTICATED_FULLY, methods: [POST, PUT, PATCH, DELETE]}

